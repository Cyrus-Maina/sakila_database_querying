#Hello! Below is an analysis on the Sakila DB  which we'll query to extract several insights

use sakila;

#Customer Queries:
#Display the rental history for a specific customer, including the film titles, rental dates, and return dates.
SELECT 
    customer_id, f.title, r.rental_date, r.return_date
FROM
    rental r
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    film f ON f.film_id = i.film_id
    where customer_id = 1
;


#Get the total revenue generated by each customer.
SELECT distinct
    customer_id, SUM(amount) AS amount_spent
FROM
    payment
GROUP BY customer_id
ORDER BY amount_spent DESC
;

#Find the customers who have not rented any films
SELECT 
    c.customer_id,
    CASE
        WHEN r.customer_id IS NULL THEN 'Zero Rentals'
        ELSE 'Has Rentals'
    END AS rental_status
FROM
    customer c
        LEFT JOIN
    rental r ON r.customer_id = c.customer_id
WHERE r.customer_id IS NULL
;   #all customers have once rented a movie

SELECT 
    c.customer_id,
    'No Rentals' AS rental_status
FROM
    customer c
        LEFT JOIN
    rental r ON r.customer_id = c.customer_id
WHERE 
    r.customer_id IS NULL;		#all customers have once rented a movie
    

#List all available inventory items along with their film titles.
SELECT 
    i.inventory_id, f.title
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id	#we have titles appearing > once showing presence of several copies
;

#Find out which films are not currently in stock.
SELECT 
    f.film_id, f.title
FROM
    film f
        LEFT JOIN
    inventory i ON f.film_id = i.film_id
WHERE
    i.inventory_id IS NULL;		#42 movies are out of stock
    
    
#Rental Queries:
#Show the total number of rentals for each month.
SELECT 
    MONTH(rental_date) AS month_rented,
    COUNT(*) AS number_of_rented_films
FROM
    rental
GROUP BY month_rented
ORDER BY number_of_rented_films DESC;


#Calculate the average rental duration for all films.
SELECT 
    AVG(DATEDIFF(return_date, rental_date)) AS average_rental_duration
FROM
    rental
;		#the average rental duartion is 5 days


#how long was each film rented
select rental_id, datediff(return_date,rental_date) as rental_duration
from
rental ;		#Read results in DAYS

#Payment Queries:
#Get the total revenue generated for each month.
SELECT 
    MONTH(payment_date) AS calendar_month,
    SUM(amount) AS total_revenues
FROM
    payment
GROUP BY calendar_month		#records of 5 months only
ORDER BY total_revenues DESC
;		#july is the highest grossing at $28,368


#Calculate the average payment amount per customer.
SELECT 
    customer_id, ROUND(AVG(amount), 2) AS average_amount_spent
FROM
    payment
GROUP BY customer_id
order by average_amount_spent desc;


#Find the top-paying customers.
SELECT 
    c.first_name,
    c.last_name,
    c.customer_id,
    SUM(amount) AS amount_spent
FROM
    payment p
        JOIN
    customer c ON p.customer_id = c.customer_id
GROUP BY c.customer_id
ORDER BY amount_spent DESC
LIMIT 10;		#highest paying is at $221


#Film Queries:
#List all films in the Action genre.
SELECT 
    f.title
FROM
    film f
        JOIN
    film_category fc ON f.film_id = fc.film_id
        JOIN
    category c ON c.category_id = fc.category_id
WHERE
    c.name = 'Action'		#input category of choice
;


#Find films released after a specific year.
SELECT 
    title
FROM
    film
WHERE
    release_year > '2005'		#input year of choice
;


#Display the films with the longest and shortest duration.
select f.title, f.length
from film f 
join
(select  min(length) as shortest_time, max(length) as longest_time
from
film)  as sub
on f.length=sub.shortest_time or f.length=sub.longest_time
;


SELECT 
    f.title, f.length
FROM
    film f
        JOIN
    (SELECT 
        MAX(length) AS max_length, MIN(length) AS min_length
    FROM
        film) AS sub ON f.length = sub.max_length
        OR f.length = sub.min_length
ORDER BY f.length;
select*from rental;

#Show the total number of rentals for each film.
SELECT 
    f.film_id, f.title, COUNT(r.rental_id) times_rented
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r on r.inventory_id=i.inventory_id
	
GROUP BY f.film_id, f.title
ORDER BY times_rented desc
;

select*from actor;
#Actor Queries:
#Find all films featuring a specific actor.
SELECT 
    fa.actor_id, a.first_name, a.last_name, f.title
FROM
    actor a
        JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        JOIN
    film f ON f.film_id = fa.film_id
    where a.first_name = 'Ed' and a.last_name = 'Chase'
    ;
    
    
#Find films released after a specific year.
SELECT 
    film_id, title, release_year
FROM
    film
WHERE
    release_year > '2005-31-12'
;


#Show the most active actors based on the number of films they have appeared in.
SELECT 
    a.actor_id,
    a.first_name,
    a.last_name,
    COUNT(fa.film_id) AS number_of_films
FROM
    actor a
        JOIN
    film_actor fa ON a.actor_id = fa.actor_id
GROUP BY a.actor_id
ORDER BY number_of_films DESC
;		#highest has 42 films


#Category Queries:
#Display all film categories along with the number of films in each category.
SELECT 
    c.category_id, c.name, COUNT(fc.film_id) AS number_of_films
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
    group by c.category_id
    order by number_of_films desc
;


#Find the most popular film category based on the number of rentals.
SELECT 
    fc.category_id, COUNT(r.rental_id) AS times_rented
FROM
    film_category fc
        JOIN
    inventory i ON i.film_id = fc.film_id
        JOIN
    rental r ON r.inventory_id = i.inventory_id
GROUP BY fc.category_id
ORDER BY times_rented DESC
;


#Show the top-rated films in a specific category.
SELECT 
    f.film_id, f.title, f.rating, fc.category_id
FROM
    film f
        JOIN
    film_category fc ON fc.film_id = f.film_id
WHERE
    (SELECT 
            category_id
        FROM
            category
        WHERE
            name = 'comedy')
GROUP BY f.film_id , fc.category_id
ORDER BY f.rating DESC;


#create procedure that receives category name and outputs toprated films in it
delimiter $$
create procedure top_rated_by_category (in category_name varchar(255))
begin
select f.film_id, f.title, f.rating, fc.category_id
from
    film f
        JOIN
    film_category fc ON fc.film_id = f.film_id
    join category c on c.category_id=fc.category_id
WHERE
     c.name = category_name
     
GROUP BY f.film_id , fc.category_id
ORDER BY f.rating DESC;
end $$
delimiter ;


SELECT 
    first_name, last_name, email, a.address
FROM
    staff s
        JOIN
    address a ON a.address_id = s.address_id
;		#there are only 2


#Display the total sales generated by each staff member.
SELECT 
    s.staff_id, SUM(p.amount) AS sales_per_staff
FROM
    staff s
        JOIN
    payment p ON s.staff_id = p.staff_id
GROUP BY s.staff_id
ORDER BY sales_per_staff DESC
;		#staff_id 2 has more sales


#Find the staff member with the highest number of rentals processed.
SELECT 
    staff_id, COUNT(rental_id) AS rentals_processed
FROM
    payment
GROUP BY staff_id
ORDER BY rentals_processed DESC;		#staff_id 1 has most rentals


#Store Queries:
#Get the total revenue generated by each store
SELECT 
    s.store_id, SUM(p.amount) AS revenues_by_store
FROM
    store s
        JOIN
    staff st ON s.store_id = st.store_id
    join
    payment p on p.staff_id=st.staff_id
GROUP BY s.store_id
ORDER BY revenues_by_store
;


#List all stores along with their addresses and managers
SELECT 
    st.store_id,
    a.address,
    s.first_name,
    s.last_name,
    manager_staff_id
FROM
    store st
        JOIN
    staff s ON s.store_id = st.store_id
        JOIN
    address a ON a.address_id = st.address_id
;

#Show the total number of rentals for each actor.
SELECT 
    actor_id, COUNT(rental_id) AS number_of_rentals
FROM
    film_actor fa
        JOIN
    inventory i ON i.film_id = fa.film_id
        JOIN
    rental r ON r.inventory_id = i.inventory_id
GROUP BY actor_id
ORDER BY number_of_rentals DESC
;